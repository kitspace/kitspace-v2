name: Docker

on: [push]
jobs:
  build:
    name: Build images
    runs-on: ubuntu-20.04

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Get commit SHA
        id: sha
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=gitea_sha_short::$( git submodule foreach 'echo "$sha1"' \
            | sed -n "/gitea/{N; p}" | sed '2q;d'| xargs git rev-parse --short )"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # to avoid being rate-limited on pulls
      - name: Login to hub.docker.com
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
        continue-on-error: true

      - name: Pull frontend image
        id: pull_frontend
        shell: bash
        run: docker pull ghcr.io/kitspace/frontend:${{ steps.sha.outputs.sha_short }}
        continue-on-error: true

      - name: Build and push frontend
        # If the previous step failed, i.e., there's no image tagged:
        # frontend:${{gitea_sha_short}} in ghcr, build image and push it
        if: steps.pull_frontend.outcome != 'success'
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ghcr.io/kitspace/frontend:${{ steps.sha.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Pull processor image
        id: pull_processor
        shell: bash
        run: docker pull ghcr.io/kitspace/processor:${{ steps.sha.outputs.sha_short }}
        continue-on-error: true

      - name: Build and push processor
        # If the previous step failed, i.e., there's no image tagged:
        # processor:${{gitea_sha_short}} in ghcr, build image and push it
        if: steps.pull_processor.outcome != 'success'
        uses: docker/build-push-action@v2
        with:
          context: ./processor
          file: ./processor/Dockerfile
          push: true
          tags: ghcr.io/kitspace/processor:${{ steps.sha.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Build and push nginx
        uses: docker/build-push-action@v2
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: ghcr.io/kitspace/nginx:${{ steps.sha.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Pull gitea image
        id: pull_gitea
        shell: bash
        run: docker pull ghcr.io/kitspace/gitea:${{ steps.sha.outputs.gitea_sha_short }}
        continue-on-error: true

      - name: Build and push gitea
        # If the previous step failed, i.e., there's no image tagged
        # gitea:${{gitea_sha_short}} in ghcr, build image and push it
        if: steps.pull_gitea.outcome != 'success'
        uses: docker/build-push-action@v2
        with:
          context: ./gitea
          file: ./gitea/Dockerfile
          push: true
          tags: ghcr.io/kitspace/gitea:${{ steps.sha.outputs.gitea_sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/abdo-dev'|| github.ref == 'refs/heads/kaspar-dev' }}
    name: Deploy to staging
    runs-on: ubuntu-20.04
    environment: staging
    needs:
      - build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Get commit SHA
        id: sha
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=gitea_sha_short::$( git submodule foreach 'echo "$sha1"' \
            | sed -n "/gitea/{N; p}" | sed '2q;d'| xargs git rev-parse --short )"

      - name: Get branch name
        id: branch
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}

      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        # we don't really need to log in to pull the images, just doing it in
        # case an image is accidentally set to private
        continue-on-error: true

      # to avoid being rate-limited on pulls
      - name: Login to hub.docker.com
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
        continue-on-error: true

      - name: Set example environment variables
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .env.example

      - name: Deploy to ${{ steps.branch.outputs.short_ref }}.staging.kitspace.dev
        uses: kitspace/docker-remote-deployment-action@master
        env:
          POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_ROOT_PASSWORD }}
          GITEA_SECRET_KEY: ${{ secrets.STAGING_GITEA_SECRET }}
          KITSPACE_PROCESSOR_REMOTE_API_TOKENS: ${{ secrets.STAGING_KITSPACE_PROCESSOR_REMOTE_API_TOKEN }}
          KITSPACE_DOMAIN: ${{ steps.branch.outputs.short_ref }}.staging.kitspace.dev
          KITSPACE_SCHEME: https
          KITSPACE_DEV_PORT: '80'
          KITSPACE_EXTERNAL_PORT: ''
          CERTBOT_ENABLED: 'true'
          CERTBOT_EMAIL: kaspar@kitspace.org
          COMPOSE_PROJECT_NAME: kitspace-${{ steps.branch.outputs.short_ref }}
          FRONTEND_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.sha_short }}'
          PROCESSOR_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.sha_short }}'
          NGINX_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.sha_short }}'
          GITEA_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.gitea_sha_short }}'
          KITSPACE_PROCESSOR_LOG_LEVEL: debug
        with:
          remote_docker_host: deploy@${{ steps.branch.outputs.short_ref }}.staging.kitspace.org
          ssh_private_key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          ssh_public_key: ${{ secrets.STAGING_SSH_PUBLIC_KEY }}
          stack_file_name: docker-compose.yml,docker-compose.deploy.yml
          args: up -d

  test:
    name: Test E2E
    runs-on: ubuntu-20.04
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, edge, electron]

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Set environment variables
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .env.example

      - name: Get commit SHA
        id: sha
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=gitea_sha_short::$( git submodule foreach 'echo "$sha1"' \
            | sed -n "/gitea/{N; p}" | sed '2q;d'| xargs git rev-parse --short )"

      - name: Install Microsoft Edge
        if: ${{ matrix.browser == 'edge' }}
        timeout-minutes: 10
        shell: bash
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
          sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
          sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-dev.list'
          sudo rm microsoft.gpg
          sudo apt update && sudo apt install microsoft-edge-beta

      - name: Configure /etc/hosts
        shell: bash
        run: cat ./config/hosts | sudo tee -a /etc/hosts

      - name: Install Gitea
        shell: bash
        timeout-minutes: 5
        env:
          FRONTEND_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.sha_short }}'
          PROCESSOR_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.sha_short }}'
          NGINX_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.sha_short }}'
          GITEA_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.gitea_sha_short }}'
        run: |
          scripts/install_gitea.sh

      - name: pre e2e
        shell: bash
        run: scripts/pre_e2e.sh

      - name: e2e
        uses: cypress-io/github-action@v2
        timeout-minutes: 40
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MOZ_FORCE_DISABLE_E10S: 1
          FRONTEND_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.sha_short }}'
          PROCESSOR_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.sha_short }}'
          NGINX_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.sha_short }}'
          GITEA_DEPLOY_IMAGE_TAG: ':${{ steps.sha.outputs.gitea_sha_short }}'
        with:
          start: docker-compose -f ../docker-compose.yml -f ../docker-compose.deploy.yml up
          # wait for 2 minutes for the server to respond
          wait-on: 'http://kitspace.test:3000'
          # This value is in seconds
          wait-on-timeout: 120
          working-directory: frontend
          record: true
          browser: ${{ matrix.browser }}
          group: ${{ matrix.browser }}

  publish:
    name: Tag "latest"
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    needs:
      - test

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Get commit SHA
        id: sha
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=gitea_sha_short::$( git submodule foreach 'echo "$sha1"' \
            | sed -n "/gitea/{N; p}" | sed '2q;d'| xargs git rev-parse --short )"

      - name: Tag frontend:latest
        run: |
          curl \
            https://ghcr.io/v2/kitspace/frontend/manifests/${{ steps.sha.outputs.sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
            > manifest.json
          curl -X PUT \
            https://ghcr.io/v2/kitspace/frontend/manifests/latest \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
            -d '@manifest.json'
          rm manifest.json

      - name: Tag processor:latest
        run: |
          curl \
            https://ghcr.io/v2/kitspace/processor/manifests/${{ steps.sha.outputs.sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
            > manifest.json
          curl -X PUT \
            https://ghcr.io/v2/kitspace/processor/manifests/latest \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
            -d '@manifest.json'
          rm manifest.json

      - name: Tag nginx:latest
        run: |
          curl \
            https://ghcr.io/v2/kitspace/nginx/manifests/${{ steps.sha.outputs.sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
            > manifest.json
          curl -X PUT \
            https://ghcr.io/v2/kitspace/nginx/manifests/latest \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
            -d '@manifest.json'
          rm manifest.json

      - name: Tag gitea:latest
        run: |
          curl \
            https://ghcr.io/v2/kitspace/gitea/manifests/${{ steps.sha.outputs.gitea_sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
            > manifest.json
          curl -X PUT \
            https://ghcr.io/v2/kitspace/gitea/manifests/latest \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
            -d '@manifest.json'
          rm manifest.json
