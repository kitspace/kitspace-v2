name: Docker

on:
  push:
    branches: [master, abdo-dev, kaspar-dev, review]
  # using "pull_request_target" instead of "pull_request" runs this in the
  # "master" branch context and makes secrets work with external pull requests
  # (incl. dependabot). we check for author_association below so first-time
  # contributors can't run this workflow.
  pull_request_target:
    branches: [master]
jobs:
  build:
    if: ${{ github.event_name == 'push' || github.event.pull_request.author_association == 'MEMBER' || github.event.pull_request.author_association == 'CONTRIBUTOR' }}
    name: Build images
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
      matrix:
        service: [frontend, processor, nginx, gitea]
    outputs:
      frontend_sha_short: ${{ steps.sha.outputs.frontend_sha_short }}
      processor_sha_short: ${{ steps.sha.outputs.processor_sha_short }}
      nginx_sha_short: ${{ steps.sha.outputs.nginx_sha_short }}
      gitea_sha_short: ${{ steps.sha.outputs.gitea_sha_short }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          # check out the pull-request when triggered by "pull_request_target",
          # when triggered on "push" this is empty and checks out the branch
          # pushed to
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: 'recursive'

      - name: Get commit SHA

        if: ${{ matrix.service != 'gitea' }}
        id: sha
        shell: bash
        run: |
          echo "::set-output name=${{ matrix.service }}_sha_short::$(git log --format=%h -n1 ${{ matrix.service }}/)"
          echo "::set-output name=sha_short::$(git log --format=%h -n1 ${{ matrix.service }}/)"

      - name: Get commit SHA
        if: ${{ matrix.service == 'gitea' }}
        id: sha
        shell: bash
        run: |
          echo "::set-output name=gitea_sha_short::$( git submodule foreach 'echo "$sha1"' \
            | sed -n "/gitea/{N; p}" | sed '2q;d'| xargs git rev-parse --short )"
          echo "::set-output name=sha_short::$( git submodule foreach 'echo "$sha1"' \
            | sed -n "/gitea/{N; p}" | sed '2q;d'| xargs git rev-parse --short )"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # to avoid being rate-limited on pulls
      - name: Login to hub.docker.com
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
        continue-on-error: true

      - name: Check for ${{ matrix.service }} image
        id: check_for_image
        shell: bash
        run: |
          if [ "$(curl \
            https://ghcr.io/v2/kitspace/${{ matrix.service }}/manifests/${{ steps.sha.outputs.sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
             | jq .errors)" != "null" ]; then false; fi
        continue-on-error: true

      - name: Build and push ${{ matrix.service }}
        # If the previous step failed, i.e. no image tagged with this sha,
        # build the image and push it
        if: steps.check_for_image.outcome != 'success'
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ghcr.io/kitspace/${{ matrix.service }}:${{ steps.sha.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

  deploy:
    if: ${{ github.event_name == 'push' }}
    name: Deploy to staging
    runs-on: ubuntu-20.04
    environment: staging
    needs:
      - build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          # 0 means fetch all commits, which we need for "review" branch deploy
          # reporting
          fetch-depth: 0

      - name: Get branch name
        id: branch
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}

      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        # we don't really need to log in to pull the images, just doing it in
        # case an image is accidentally set to private
        continue-on-error: true

      # to avoid being rate-limited on pulls
      - name: Login to hub.docker.com
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
        continue-on-error: true

      - name: Set example environment variables
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .env.example

      - name: Deploy to ${{ steps.branch.outputs.short_ref }}.staging.kitspace.dev
        id: deploy_to_staging
        uses: kitspace/docker-remote-deployment-action@master
        env:
          POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_ROOT_PASSWORD }}
          POSTGRES_READONLY_USER_PASSWORD: ${{ secrets.STAGING_POSTGRES_READONLY_PASSWORD }}
          GITEA_SECRET_KEY: ${{ secrets.STAGING_GITEA_SECRET }}
          KITSPACE_PROCESSOR_REMOTE_API_TOKENS: ${{ secrets.STAGING_KITSPACE_PROCESSOR_REMOTE_API_TOKEN }}
          KITSPACE_DOMAIN: ${{ steps.branch.outputs.short_ref }}.staging.kitspace.dev
          KITSPACE_SCHEME: https
          KITSPACE_DEV_PORT: '80'
          KITSPACE_EXTERNAL_PORT: ''
          CERTBOT_ENABLED: 'true'
          CERTBOT_EMAIL: kaspar@kitspace.org
          COMPOSE_PROJECT_NAME: kitspace-${{ steps.branch.outputs.short_ref }}
          FRONTEND_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.frontend_sha_short }}'
          PROCESSOR_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.processor_sha_short }}'
          NGINX_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.nginx_sha_short }}'
          GITEA_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.gitea_sha_short }}'
          KITSPACE_PROCESSOR_LOG_LEVEL: debug
        with:
          remote_docker_host: deploy@${{ steps.branch.outputs.short_ref }}.staging.kitspace.dev
          ssh_private_key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          ssh_public_key: ${{ secrets.STAGING_SSH_PUBLIC_KEY }}
          stack_file_name: docker-compose.yml,docker-compose.deploy.yml
          args: up -d

      - name: Report "review" deploy failure
        if: ${{ failure() && github.ref == 'refs/heads/review' }}
        run: scripts/report_auto_merge_deploy.py '${{ secrets.GITHUB_TOKEN }}' 'failure'

      - name: Report "review" deploy success
        if: ${{ success() && github.ref == 'refs/heads/review' }}
        run: scripts/report_auto_merge_deploy.py '${{ secrets.GITHUB_TOKEN }}' 'success'

  test:
    name: Test E2E
    runs-on: ubuntu-20.04
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, edge, electron]

    steps:
      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Set environment variables
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .env.example

      - name: Install Microsoft Edge
        if: ${{ matrix.browser == 'edge' }}
        timeout-minutes: 10
        shell: bash
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
          sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
          sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-dev.list'
          sudo rm microsoft.gpg
          sudo apt update && sudo apt install microsoft-edge-beta

      - name: Configure /etc/hosts
        shell: bash
        run: cat ./config/hosts | sudo tee -a /etc/hosts

      - name: Install Gitea
        shell: bash
        timeout-minutes: 5
        env:
          FRONTEND_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.frontend_sha_short }}'
          PROCESSOR_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.processor_sha_short }}'
          NGINX_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.nginx_sha_short }}'
          GITEA_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.gitea_sha_short }}'
        run: |
          scripts/install_gitea.sh

      - name: pre e2e
        shell: bash
        run: scripts/pre_e2e.sh

      - name: e2e
        uses: cypress-io/github-action@v2
        timeout-minutes: 40
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MOZ_FORCE_DISABLE_E10S: 1
          FRONTEND_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.frontend_sha_short }}'
          PROCESSOR_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.processor_sha_short }}'
          NGINX_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.nginx_sha_short }}'
          GITEA_DEPLOY_IMAGE_TAG: ':${{ needs.build.outputs.gitea_sha_short }}'
        with:
          start: docker-compose -f ../docker-compose.yml -f ../docker-compose.deploy.yml up
          # wait for 2 minutes for the server to respond
          wait-on: 'http://kitspace.test:3000'
          # This value is in seconds
          wait-on-timeout: 120
          working-directory: frontend
          record: true
          browser: ${{ matrix.browser }}
          group: ${{ matrix.browser }}

  publish:
    name: Tag "latest"
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-20.04
    needs:
      - build
      - test

    steps:
      - name: Tag frontend:latest
        run: |
          curl \
            https://ghcr.io/v2/kitspace/frontend/manifests/${{ needs.build.outputs.frontend_sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
            > manifest.json
          curl -X PUT \
            https://ghcr.io/v2/kitspace/frontend/manifests/latest \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
            -d '@manifest.json'
          rm manifest.json

      - name: Tag processor:latest
        run: |
          curl \
            https://ghcr.io/v2/kitspace/processor/manifests/${{ needs.build.outputs.processor_sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
            > manifest.json
          curl -X PUT \
            https://ghcr.io/v2/kitspace/processor/manifests/latest \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
            -d '@manifest.json'
          rm manifest.json

      - name: Tag nginx:latest
        run: |
          curl \
            https://ghcr.io/v2/kitspace/nginx/manifests/${{ needs.build.outputs.nginx_sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
            > manifest.json
          curl -X PUT \
            https://ghcr.io/v2/kitspace/nginx/manifests/latest \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
            -d '@manifest.json'
          rm manifest.json

      - name: Tag gitea:latest
        run: |
          curl \
            https://ghcr.io/v2/kitspace/gitea/manifests/${{ needs.build.outputs.gitea_sha_short }} \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" \
            > manifest.json
          curl -X PUT \
            https://ghcr.io/v2/kitspace/gitea/manifests/latest \
            -H "Authorization: Bearer $(echo '${{ secrets.GITHUB_TOKEN }}' | base64)"  \
            -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" \
            -d '@manifest.json'
          rm manifest.json
