const { MeiliSearch } = require('meilisearch')
const {
  PHASE_PRODUCTION_SERVER,
  PHASE_DEVELOPMENT_SERVER,
} = require('next/constants')

module.exports = async phase => {
  let meiliSearchOnlyKey = {}
  let imageDomains = []
  if ([PHASE_DEVELOPMENT_SERVER, PHASE_PRODUCTION_SERVER].includes(phase)) {
    // the search-only api key gets generated by meili so we have to retrieve
    // it at runtime rather than use an env variable
    const meiliMaster = new MeiliSearch({
      host: 'http://meilisearch:7700',
      apiKey: process.env.MEILI_MASTER_KEY,
    })
    // get the api key which _only_ has the "search" capability
    const meiliKeys = await meiliMaster.getKeys()
    meiliSearchOnlyKey = meiliKeys.results.find(
      key => key.actions.length === 1 && key.actions[0] === 'search',
    )

    imageDomains = [
      // TODO: use a wildcard when https://github.com/vercel/next.js/pull/27345 get merged
      `gitea.${process.env.KITSPACE_DOMAIN}`,
      new URL(process.env.KITSPACE_PROCESSOR_ASSET_URL).hostname,
      'github.com',
      'raw.githubusercontent.com',
      'secure.gravatar.com',
    ]
  }
  /**
   * @type {import('next').NextConfig}
   */
  const nextConfig = {
    // we use nginx to compress so we turn off next.js gzip compression
    compress: false,
    publicRuntimeConfig: {
      KITSPACE_DOMAIN: process.env.KITSPACE_DOMAIN,
      KITSPACE_GITEA_URL: process.env.KITSPACE_GITEA_URL,
      KITSPACE_PROCESSOR_ASSET_URL: process.env.KITSPACE_PROCESSOR_ASSET_URL,
      KITSPACE_MEILISEARCH_URL: process.env.KITSPACE_MEILISEARCH_URL,
      MAX_FILE_SIZE: process.env.MAX_FILE_SIZE,
      meiliApiKey: meiliSearchOnlyKey.key,
    },
    assetPrefix: process.env.KITSPACE_FRONTEND_ASSET_URL,
    eslint: {
      ignoreDuringBuilds: true,
    },
    exportPathMap(map) {
      for (const key in map) {
        map[key].query = map[key].query || {}
        map[key].query.isStaticFallback = true
      }
      const codes = [
        400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414,
        415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 431, 451, 500,
        501, 502, 503, 504, 505, 506, 507, 508, 510, 511,
      ]
      codes.forEach(err => {
        map['/error/' + err] = { page: '/_error', query: { staticStatusCode: err } }
      })
      return map
    },
    images: {
      domains: imageDomains,
    },
    async redirects() {
      return [
        // legacy custom redirects https://github.com/kitspace/kitspace/blob/master/src/_redirects
        {
          source: '/jelly',
          destination: '/kitspace/jelly',
          permanent: true,
        },
        {
          source: '/boards/github.com/prometheus-science/:splat*',
          destination: '/amchagas/:splat*',
          permanent: true,
        },
        {
          source: '/boards/github.com/kitnic-forks/:splat*',
          destination: '/kitspace-forks/:splat*',
          permanent: true,
        },
        {
          source: '/boards/github.com/monostable/:splat*',
          destination: '/kitspace/:splat*',
          permanent: true,
        },
        {
          source:
            '/boards/github.com/ozel/diy_particle_detector/diy%20alpha%20spectrometer',
          destination: '/ozel/DIY_particle_detector/alpha-spectrometer',
          permanent: true,
        },
        {
          source:
            '/boards/github.com/ozel/diy_particle_detector/diy%20electron%20detector',
          destination: '/ozel/DIY_particle_detector/electron-detector',
          permanent: true,
        },
        {
          source: '/oshcamp2016',
          destination: 'https://monostable.co.uk/presentations/oshcamp2016-kitnic',
          permanent: true,
        },
        {
          source: '/fosdem2017',
          destination: 'https://monostable.co.uk/presentations/fosdem2017-kitnic',
          permanent: true,
        },
        {
          source:
            '/boards/gitlab.com/bath_open_instrumentation_group/sangaboard/:splat*',
          destination:
            '/bath_open_instrumentation_group/sangaboard/sangaboard_v0.3/:splat*',
          permanent: true,
        },
        {
          source: '/boards/github.com/joeycastillo/the-open-book',
          destination: '/joeycastillo/The-Open-Book/Open-Book-Abridged',
          permanent: true,
        },
        {
          source: '/boards/github.com/aleksas/interferometer',
          destination: 'https://github.com/aleksas/interferometer',
          permanent: true,
        },
        {
          source: '/boards/gitlab.com/drid/f800gs-led-turn-signal/',
          destination:
            '/drid/f800gs-led-turn-signal/f800gs_led_turn_signal_dual_row/',
          permanent: true,
        },
        {
          source: '/boards/github.com/isobianin/BeeHive/:splat*',
          destination: '/BeeHive-org/BeeHive/:splat*',
          permanent: true,
        },
        {
          source: '/boards/github.com/BeeHive-org/BeeHive/boards/:splat*',
          destination: '/BeeHive-org/BeeHive/:splat*',
          permanent: true,
        },
        {
          source: '/boards/gitlab.com/openflexure/ofm-illumination/',
          destination: '/openflexure/openflexure-phase-contrast-illumination',
          permanent: true,
        },
        {
          source:
            '/boards/gitlab.com/openflexure/openflexure-constant-current-illumination/',
          destination:
            '/openflexure/openflexure-constant-current-illumination/ofm_cc_illumination_single',
          permanent: true,
        },
        {
          source: '/boards/github.com/beehive-org/beehive/boards/peltier',
          destination:
            'https://github.com/BeeHive-org/BeeHive/tree/master/hardware/archive/peltier',
          permanent: true,
        },
        {
          source: '/boards/github.com/jan--henrik/:splat*',
          destination: 'jana-marie/:splat*',
          permanent: true,
        },
        {
          source: '/boards/github.com/Open-Gamma-Project/SiPM-Carrier-Board/',
          destination: '/OpenGammaProject/MicroFC-SiPM-Carrier-Board/',
          permanent: true,
        },
        {
          source: '/boards/github.com/open-gamma-project/sipm-carrier-board/',
          destination: '/OpenGammaProject/MicroFC-SiPM-Carrier-Board/',
          permanent: true,
        },
        {
          source: '/boards/github.com/Open-Gamma-Project/:splat*',
          destination: '/OpenGammaProject/:splat*',
          permanent: true,
        },
        {
          source: '/boards/github.com/open-gamma-project/:splat*',
          destination: '/OpenGammaProject/:splat*',
          permanent: true,
        },
        {
          source: '/boards/github.com/bschwind/key-ripper/',
          destination: '/bschwind/key-ripper/key-ripper/',
          permanent: true,
        },
        // end legacy custom redirects
        {
          // we use "_" as the project name when there is only one project but we
          // don't want it to appear in the URL of the project page
          source: '/:user/:repo/_',
          destination: '/:user/:repo',
          permanent: true,
        },
        {
          source: '/boards/:service/:user/:repo*',
          destination: '/:user/:repo*',
          permanent: true,
        },
        {
          source: '/bom-builder',
          destination: 'https://github.com/kitspace/bom-builder',
          permanent: false,
        },
      ]
    },
    async rewrites() {
      return [
        {
          source: '/',
          destination: '/search?q=',
        },
      ]
    },
  }
  return nextConfig
}
